#CURRENTLY IN DEV
#THANE EDITION v6
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 5.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 220.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 3.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 50.0  ; retract speed in mm/s
variable_unretract        : 3.1   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 10.0  ; z move speed in mm/s
variable_speed_move       : 200.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False]
gcode:

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Use absolute coordinates
    G90
    # Use relative extrusion
    M83
    # Start heating
    M140 S{BED_TEMP}
    M104 S185
    G28 ; Home
    #BED_MESH_CALIBRATE ;remove comment if the printer has z-probe
    G0 X0 Y0 Z2.0 ; Move Z Axis up little to prevent scratching of Heat Bed
    # Set and wait to reach temperature
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP}
    # Reset extruder position
    G92 E0
    G1 E5
    G92 E0
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X10 Y2 Z0.3 F5000.0 ; Move to start position
    G1 X110 Y2 Z0.3 F1500.0 E8 ; Draw the first line
    #G1 X110 Y2.3 Z0.3 F5000.0 ; Move to side a little
    #G1 X10 Y2.3 Z0.3 F1500.0 E16 ; Draw the second line
    G92 E0 ; Reset Extruder
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G90

[gcode_macro END_PRINT]
gcode:
    M220 S100 ; Reset Speed factor override percentage to default (100%)
    M221 S100 ; Reset Extrude factor override percentage to default (100%)
    # Move nozzle away from print while retracting
    G91 ; Set coordinates to relative
    G1 F1800 E-5 ; Retract filament 5 mm to prevent oozing
    G1 F3000 Z20 ; Move Z Axis up 20 mm to allow filament ooze freely
    G90
    G1 X0 Y230 F6000 ; Move Heat Bed to the front for easy print removal
    M106 S0 ; Turn off cooling fan
    M104 S0 ; Turn off extruder
    M140 S0 ; Turn off bed
    M107 ; Turn off Fan
    M84 ; Disable stepper motors
    G92 E0
    # Disable steppers
    M84

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    ##### get user parameters or use default #####
    {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% set allow_park = False if not macro_found
                   else False if client.park_at_cancel is not defined
                   else True  if client.park_at_cancel|lower == 'true'
                   else False %}
    {% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
    ##### define park position #####
    {% set park_x = ""                                    if not macro_found
               else ""                                    if client.park_at_cancel_x is not defined
               else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
    {% set park_y = ""                                    if not macro_found
               else ""                                    if client.park_at_cancel_y is not defined
               else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
    {% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
    ##### end of definitions #####
    {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
    _CLIENT_RETRACT LENGTH={retract}
    M104 S185
    M140 S55
    M106 S0
    M84
    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    CANCEL_PRINT_BASE

[gcode_macro G29]
description: Mesh calibrate and save on default
gcode:
    G28
    BED_MESH_CALIBRATE
    G0 X0 Y0 Z10
    BED_MESH_PROFILE save=default


###
#untested gcode_macro below
###
[gcode_macro _USE_SOLID_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.solid_infill_sqv %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_TOP_SOLID_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.top_solid_infill_sqv %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_INTERNAL_PERIMETER_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.internal_perimeter_sqv %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_INTERNAL_BRIDGE_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.internal_bridge_sqv %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_BRIDGE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.bridge_infill_sqv %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro SET_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=infill_sqv VALUE={val}

[gcode_macro SET_SOLID_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.solid_infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=solid_infill_sqv VALUE={val}

[gcode_macro SET_TOP_SOLID_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.top_solid_infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=top_solid_infill_sqv VALUE={val}

[gcode_macro SET_INTERNAL_PERIMETER_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.internal_perimeter_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=internal_perimeter_sqv VALUE={val}

[gcode_macro SET_INTERNAL_BRIDGE_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.internal_bridge_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=internal_bridge_sqv VALUE={val}

[gcode_macro SET_BRIDGE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.bridge_infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=bridge_infill_sqv VALUE={val}

[gcode_macro Query_SQV_Values]
gcode:
    {% set sqv = printer.save_variables.variables %}
    {% set default_sqv = printer.configfile.settings.printer.square_corner_velocity %}
    {action_respond_info(
        "Infill SQV values: {}\n
        Solid Infill SQV values: {}\n
        Top Solid Infill SQV values: {}\n
        Internal Perimeter SQV values: {}\n
        Internal Bridge SQV values: {}\n
        Bridge Infill SQV values: {}\n
        Default SQV values: {}\n".format(sqv.infill_sqv,sqv.solid_infill_sqv,sqv.top_solid_infill_sqv,sqv.internal_perimeter_sqv,sqv.internal_bridge_sqv,sqv.bridge_infill_sqv,default_sqv))}
